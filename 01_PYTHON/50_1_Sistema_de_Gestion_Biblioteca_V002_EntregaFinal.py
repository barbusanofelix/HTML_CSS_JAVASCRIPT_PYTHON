'''
SISTEMA DE GESTION DE BIBLIOTECA.
Tenemos libros ( representados por la clase Libro, donde sus atributos son titulo, autor, ISBN y disponible ) que forman parte de un inventario 
de una Biblioteca, representado por la clase Biblioteca. 
Dentro de Biblioteca inicializamos una lista (inventario_libros) y la carga con 5 libros para tener una data inicial. 
Atraves del menu y por su puesto de los metodos, de las clases,  podremos agregar, prestar, devolver, buscar y mostrar los libros.
El codigo esta comentado con bastante detalle. 
'''


class Libro:                                                            #* Clase Libro 
    #* Cosntructor.
    def __init__(self, titulo: str, autor: str, isbn: str):
        #* Inicializa un libro con t√≠tulo, autor, ISBN y disponible por defecto.
        self.titulo = titulo
        self.autor = autor
        self.isbn = isbn
        self.disponible = True                                          #* Por defecto, cada instancia que se cree, tendr√° disponible=True

    def prestar(self):                                                  #* Basicamente cambia el atributo 'disponible' de True -> False.
        # libro que este disponible cambiar√° su status a disponible = False
        if self.disponible:
            self.disponible = False                                     #* Aqui hace el cambio del atributo 'disponible' de la instancia del libro
            print(f" El libro '{self.isbn} - {self.titulo} - {self.autor}' ha sido prestado.")
        else:       #* Si ya est√° prestado, pues lo notifica al usuario.
            print(f" El libro '{self.isbn} - {self.titulo} - {self.autor}' YA EST√Å PRESTADO.")

    def devolver(self):
        #* libro que no este disponible ( prestado ) cambiar√° su status a disponible = True
        if not self.disponible:
            self.disponible = True                                      #* Aqui hace el cambio del atributo 'disponible' de la instancia del libro
            print(f"El libro '{self.isbn} - {self.titulo} - {self.autor}' ha sido devuelto.")
        else:
            print(f"El libro '{self.isbn} - {self.titulo} - {self.autor}' YA ESTABA DISPONIBLE.")

    def __str__(self):
        """Muestra la informaci√≥n del libro."""
        estado = "Disponible" if self.disponible else "Prestado"
        return f"{self.titulo:<35}  {self.autor:<25}  {self.isbn:<6}   {estado:<15}"

# Bibliote es la clase que gestiona la carga de 5 libros al inventario_libros y maneja el inventario de libros
class Biblioteca:
    #* Cosntructor: Inicializa la lista inventario_libros y carga 5 libros en la lista inventario_libros 
    def __init__(self):
        #* Inicializa la biblioteca con una lista inventario_libros vacia ( [] ) que la llenamos con la funcion _cargar_libros_iniciales() 
        self.inventario_libros = []
        self._cargar_libros_iniciales()

    def _cargar_libros_iniciales(self):    
        print("\nCarga autom√°tica de 5 libros en el inventario de la Biblioteca\n")     #* Muestra este mensaje en pantalla.
        libros_iniciales = [                                                            #* Es un lista que contiene los strings que llenaran los atributos de los Libros
            ("Cien a√±os de soledad", "Gabriel Garc√≠a M√°rquez", "12345"),
            ("1984", "George Orwell", "23456"),
            ("El Principito", "Antoine de Saint-Exup√©ry", "34567"),
            ("Don Quijote de la Mancha", "Miguel de Cervantes", "45678"),
            ("Orgullo y prejuicio", "Jane Austen", "56789"),
        ]

        for titulo, autor, isbn in libros_iniciales:    #* Recorremos la lista inicial para el titulo, autor e ISBN. 
            self.agregar(isbn, titulo, autor)           #* Al llamar el metodo agregar convertiremos la Lista de strings en objetos de la Clase Libro con sus atributos explicitos e implicitos.

    def agregar(self, isbn, titulo=None, autor=None):
        """Agrega un nuevo libro a la biblioteca si el ISBN no existe."""
        if self.buscar(isbn):
            print(f"‚ö†Ô∏è Ya existe un libro con ISBN {isbn} en la biblioteca.")
            return

        if titulo is None:
            titulo = input("Ingrese el t√≠tulo del libro: ")
        if autor is None:
            autor = input("Ingrese el autor del libro: ")

        nuevo_libro = Libro(titulo, autor, isbn)
        self.inventario_libros.append(nuevo_libro)
        #print(f"Libro agregado:\n{nuevo_libro}")
        print(f"{'T√≠tulo':<35}  {'Autor':<25}  {'ISBN':<7}  {'Disponibilidad':<15}\n{nuevo_libro}")

    def buscar(self, isbn):
        """Busca un libro por ISBN y devuelve el objeto libro o None."""
        for libro in self.inventario_libros:
            if libro.isbn == isbn:
                return libro
        return None

    def prestar(self, isbn):
        """Presta un libro si est√° disponible."""
        libro = self.buscar(isbn)
        if libro:
            libro.prestar()
        else:
            print("‚ùå No se encontr√≥ un libro con ese ISBN.")

    def devolver(self, isbn):
        """Devuelve un libro si estaba prestado."""
        libro = self.buscar(isbn)
        if libro:
            libro.devolver()
        else:
            print("‚ùå No se encontr√≥ un libro con ese ISBN.")

    def mostrar(self):
        """Muestra todos los libros en la biblioteca."""
        if not self.inventario_libros:
            print(" NO HAY LIBROS EN LA BIBLIOTECA.")
            return
        print("\nListado de libros:")
        for libro in self.inventario_libros:        #* Hace un recorrido libro a libro dentro de la lista de inventario_libros
            print(libro)                            #* El print(libro) llama el metodo def __str__(self): de la clase Libro

#? La funci√≥n menu() contiene las opcione del programa. 
def menu():
    # Creamos una instancia de la Clase Biblioteca, fuera del ciclo while para que sea accesible a todas las opciones del menu
    biblioteca = Biblioteca()  # Instancia √∫nica: biblioteca de la clase Biblioteca.

    while True:      #Ciclo que no dejar√° de repetirse hasta tomar la opcion 5, es decir Salida
        print("\n Men√∫ Sistema de Gesti√≥n de Biblioteca:\n")
        print(" 1.  Agregar un nuevo libro")
        print(" 2.  Prestar un libro")
        print(" 3.  Devolver un libro")
        print(" 4.  Mostrar todos los libros")
        print(" 5.  Salir")
        # Recibimos una opcion por pantalla
        opcion = input("Seleccione una opci√≥n: ")

        if opcion == "1":                                   #* A√±adir un libro. 
            isbn = input("Ingrese el ISBN del libro: ")     #* Inicalmente pedidmos solo el ISBN para verificar si existe. 
            biblioteca.agregar(isbn)                        #* LLamar metodo agregar() de instancia biblioteca. Si ISBN no existe, pedira Titulo y autor.

        elif opcion == "2":                                 #* Prestar un libro, dando el isbn
            isbn = input("Ingrese el ISBN del libro a prestar: ")
            biblioteca.prestar(isbn)                        #* LLama metodo prestar de instancia biblioteca 

        elif opcion == "3":                                 #* Devolver un libro usando el isbn para localizarlo
            isbn = input("Ingrese el ISBN del libro a devolver: ")
            biblioteca.devolver(isbn)                       #* Llama al metodo devolver de la instancia biblioteca 

        elif opcion == "4":                                 #* Opcion para mostrar todos los libros.
            biblioteca.mostrar()                            #* LLama al metodo Mostrar de la instancia Biblioteca

        elif opcion == "5":                                 #* Salir del Programa
            print("\n Programa terminado !!!\n")
            break                                           #* con break, rompe el ciclo while True y culmina el programa

        else:
            print("\n  Opci√≥n inv√°lida. Elija el n√∫mero de la opcion, entre a 1 a 5. \n")


if __name__ == "__main__":
    menu()
'''
Flujo del programa en cada opci√≥n del men√∫
Cuando se ejecuta menu(), lo primero que hace el programa es:

Crear una √∫nica instancia de Biblioteca, la cual:
Inicializa inventario_libros como una lista vac√≠a.
Llama a _cargar_libros_iniciales(), que agrega 5 libros autom√°ticamente.
Despu√©s, entra en un bucle donde espera que el usuario seleccione una opci√≥n.

Ahora veamos qu√© sucede en cada opci√≥n del men√∫.

1Ô∏è‚É£ Opci√≥n 1: Agregar un nuevo libro
üîπ ¬øQu√© ve el usuario?
Se le pide que ingrese un ISBN.
Si el ISBN no existe, se le solicita el t√≠tulo y el autor.
Se muestra un mensaje confirmando que el libro ha sido agregado.
üîπ Flujo interno (lo que no es visible)
üìå El usuario elige "1" y el programa llama a biblioteca.agregar(isbn).
üîΩ
üìå agregar(isbn) busca si el ISBN ya existe llamando a buscar(isbn).
üîΩ
üìå buscar(isbn) recorre la lista inventario_libros y:

Si encuentra el libro, devuelve el objeto Libro ‚Üí üö´ Se muestra un mensaje de que ya existe.
Si no lo encuentra, devuelve None ‚Üí ‚úÖ Contin√∫a agregando el libro.
üîΩ
üìå Como el ISBN no existe, agregar() solicita al usuario el t√≠tulo y el autor (si no se proporcionaron).
üîΩ
üìå Se crea una instancia de Libro:
python
Copiar
Editar
nuevo_libro = Libro(titulo, autor, isbn)
üîΩ
üìå Se a√±ade a inventario_libros con:

python
Copiar
Editar
self.inventario_libros.append(nuevo_libro)
üîΩ
üìå Se muestra el mensaje confirmando que el libro ha sido agregado.

2Ô∏è‚É£ Opci√≥n 2: Prestar un libro
üîπ ¬øQu√© ve el usuario?
Se le pide que ingrese un ISBN.
Si el libro est√° disponible, se le informa que fue prestado.
Si no est√° disponible, se muestra un mensaje de error.
üîπ Flujo interno (lo que no es visible)
üìå El usuario elige "2" y el programa llama a biblioteca.prestar(isbn).
üîΩ
üìå prestar(isbn) busca el libro con buscar(isbn).
üîΩ
üìå buscar(isbn) revisa la lista inventario_libros:

Si encuentra el libro, devuelve su instancia.
Si no lo encuentra, devuelve None.
üîΩ
üìå Si buscar() encontr√≥ el libro, se ejecuta:
python
Copiar
Editar
libro.prestar()
üîΩ
üìå Dentro de Libro.prestar(), se revisa self.disponible:

Si es True, se cambia a False y se muestra el mensaje ‚úÖ.
Si es False, se muestra un mensaje de error ‚ùå.
3Ô∏è‚É£ Opci√≥n 3: Devolver un libro
üîπ ¬øQu√© ve el usuario?
Se le pide que ingrese un ISBN.
Si el libro estaba prestado, se marca como disponible.
Si ya estaba disponible, se muestra un mensaje de advertencia.
üîπ Flujo interno (lo que no es visible)
üìå El usuario elige "3" y el programa llama a biblioteca.devolver(isbn).
üîΩ
üìå devolver(isbn) busca el libro con buscar(isbn).
üîΩ
üìå buscar(isbn) recorre inventario_libros:

Si encuentra el libro, devuelve su instancia.
Si no lo encuentra, devuelve None.
üîΩ
üìå Si el libro existe, se ejecuta:
python
Copiar
Editar
libro.devolver()
üîΩ
üìå Dentro de Libro.devolver(), se revisa self.disponible:

Si es False, se cambia a True y se muestra el mensaje ‚úÖ.
Si ya era True, se muestra el mensaje ‚ö†Ô∏è.
4Ô∏è‚É£ Opci√≥n 4: Mostrar todos los libros
üîπ ¬øQu√© ve el usuario?
Se muestra una lista con todos los libros en la biblioteca y su estado (Disponible/Prestado).
Si no hay libros, aparece un mensaje indicando que la biblioteca est√° vac√≠a.
üîπ Flujo interno (lo que no es visible)
üìå El usuario elige "4" y el programa llama a biblioteca.mostrar().
üîΩ
üìå mostrar() revisa si inventario_libros est√° vac√≠o.

Si est√° vac√≠o, muestra üì≠ "No hay libros en la biblioteca".
Si hay libros, recorre inventario_libros y llama a __str__() en cada Libro.
üîΩ
üìå Libro.__str__() devuelve un string con la informaci√≥n del libro:
python
Copiar
Editar
return f"üìñ {self.titulo} - {self.autor} (ISBN: {self.isbn}) - Estado: {estado}"
üîΩ
üìå Se imprime la lista de libros.

5Ô∏è‚É£ Opci√≥n 5: Salir
üîπ ¬øQu√© ve el usuario?
Se muestra un mensaje "üëã Saliendo del programa. ¬°Hasta luego!"
El programa termina.
üîπ Flujo interno (lo que no es visible)
üìå El usuario elige "5", por lo que el while True en menu() se interrumpe con break.
üîΩ
üìå El programa finaliza.

üìå Punto clave:

inventario_libros es una lista oculta para el usuario, pero siempre se actualiza internamente.
Cada libro es un objeto Libro, y cada acci√≥n (prestar, devolver, mostrar) act√∫a sobre estos objetos.
La herencia ya no es necesaria porque Biblioteca maneja todo el inventario desde su constructor.

'''