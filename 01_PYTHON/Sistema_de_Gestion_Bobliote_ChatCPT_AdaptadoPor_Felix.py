'''
Desarrollado junto al ChapGPT

Al final el enunciado y eexplicacion del programa.
'''


class Libro:
    def __init__(self, titulo: str, autor: str, isbn: str):
        # Metodo Constructor de la clase Libro:
        # Al crear un libro se inicializa  con t√≠tulo, autor, isbn y disponible Truw,  por defecto.
        self.titulo = titulo
        self.autor = autor
        self.isbn = isbn
        self.disponible = True  

    def prestar(self):
        # Metodo prestar(). Si el libro est√° disponible, cambiamos el atributo disponible a False
        # de lo contrario, muestra un mensaje
        if self.disponible:
            self.disponible = False                 # Aqui cambiamos el atributo de la clase a False
            print(f"‚úÖ El libro '{self.titulo}' ha sido prestado.")
        else:
            print(f"‚ùå El libro '{self.titulo}' ya est√° prestado.")

    def devolver(self):
        """Devuelve el libro si estaba prestado, de lo contrario, muestra un mensaje"""
        if not self.disponible:
            self.disponible = True
            print(f"‚úÖ El libro '{self.titulo}' ha sido devuelto.")
        else:
            print(f"‚ö†Ô∏è El libro '{self.titulo}' ya estaba disponible.")

    def __str__(self):
        """Muestra la informaci√≥n del libro"""
        estado = "Disponible" if self.disponible else "Prestado"
        return f"üìñ {self.titulo} - {self.autor} (ISBN: {self.isbn}) - Estado: {estado}"


class Biblioteca:
    def __init__(self):
        """Inicializa la biblioteca con una lista vac√≠a de libros"""
        # Inicializamos la lista que contiene el inventario de libros que se hara al crear una instancia
        # de Biblioteca, y tendremos una unica lista pues crearemos solo una instancia de Biblioteca
        self.inventario_libros = []

    def agregar(self, isbn):
        """Agrega un nuevo libro a la biblioteca"""
        if self.buscar(isbn):  #Antes de agregar verificamos si ya existe el libro
            print("‚ö†Ô∏è Ya existe un libro con este ISBN en la biblioteca.")
            return
        # Si el libro no existe pedimos los datos que faltan (titulo y autor)
        titulo = input("Ingrese el t√≠tulo del libro: ")
        autor = input("Ingrese el autor del libro : ")
        nuevo_libro = Libro(titulo, autor, isbn)
        self.inventario_libros.append(nuevo_libro)
        print(f"üìö Libro '\nISBN    : {isbn}\nTitulo : {titulo}\nAutor   :{autor}'\n FUE AGREGADO!!!\n")

    def buscar(self, isbn):
        """Busca un libro por ISBN y devuelve el objeto libro o None"""
        for libro in self.inventario_libros:     # Libro es Lista de libros
            if libro.isbn == isbn:
                return libro
        return None

    def pestrar(self, isbn):
        """Presta un libro si est√° disponible"""
        libro = self.buscar(isbn)
        if libro:
            libro.prestar()
        else:
            print("‚ùå No se encontr√≥ un libro con ese ISBN.")

    def devolver(self, isbn):
        """Devuelve un libro si estaba prestado"""
        libro = self.buscar(isbn)
        if libro:
            libro.devolver()
        else:
            print("‚ùå No se encontr√≥ un libro con ese ISBN.")

    def mostrar(self):
        """Muestra todos los libros en la biblioteca"""
        if not self.inventario_libros:
            print("üì≠ No hay libros en la biblioteca.")
            return
        print("\nüìö Listado de libros:")
        for libro in self.inventario_libros:
            print(libro)

'''    
def cargar_libros_iniciales(biblioteca):
    """Carga 5 libros famosos en la biblioteca al iniciar el programa."""
    
    libros_iniciales = [
        ("Cien a√±os de soledad", "Gabriel Garc√≠a M√°rquez", "12345"),
        ("1984", "George Orwell", "23456"),
        ("El Principito", "Antoine de Saint-Exup√©ry", "34567"),
        ("Don Quijote de la Mancha", "Miguel de Cervantes", "45678"),
        ("Orgullo y prejuicio", "Jane Austen", "56789"),
    ]

    for titulo, autor, isbn in libros_iniciales:
        biblioteca.agregar(titulo, autor, isbn)
'''

def menu():
    """Funci√≥n principal para gestionar la biblioteca desde un men√∫"""
    # Hacemos una unica instancia de Biblioteca pues en ella llevamos el inventario 
       
    biblioteca =Biblioteca()    # carga 5 libreos para iniciar el inventario de libros. El usuario puede a√±adir mas libros.
    #cargar_libros_iniciales(biblioteca) 
    
    while True:
        print("\nüìå Men√∫ Sistema de Gestion de Biblioteca:")
        print("1Ô∏è‚É£ Agregar un nuevo libro")
        print("2Ô∏è‚É£ Prestar un libro")
        print("3Ô∏è‚É£ Devolver un libro")
        print("4Ô∏è‚É£ Mostrar todos los libros")
        print("5Ô∏è‚É£ Salir")

        opcion = input("Seleccione una opci√≥n: ")

        if opcion == "1":
          # titulo = input("Ingrese el t√≠tulo del libro: ")
          # autor = input("Ingrese el autor del libro: ")
            isbn =input("Ingrese el ISBN del libro: ")
            biblioteca.agregar(isbn)        #Original : biblioteca.agregar_libro(titulo, autor, isbn)

        elif opcion == "2":
            isbn = input("Ingrese el ISBN del libro a prestar: ")
            biblioteca.pestrar(isbn)

        elif opcion == "3":
            isbn = input("Ingrese el ISBN del libro a devolver: ")
            biblioteca.devolver(isbn)

        elif opcion == "4":
            biblioteca.mostrar()

        elif opcion == "5":
            print("üëã Saliendo del programa. ¬°Hasta luego!")
            break

        else:
            print("‚ö†Ô∏è Opci√≥n inv√°lida. Intente de nuevo.")



    
    

if __name__ == "__main__":
    
    menu()
    menu


'''
ENUNCIADO:
Debes crear un programa en Python que permita registrar libros y gestionar pr√©stamos a usuarios. El programa debe cumplir con los siguientes
requisitos:

1. Clase Libro:
‚Ä¢ Crea una clase Libro con los atributos titulo (str), autor (str), isbn (str) y disponible (bool, inicialmente True).
‚Ä¢ Incluye un m√©todo agregar() que permita introducir un nuevo libro con sus caracter√≠sticas.
‚Ä¢ Incluye un m√©todo prestar() que cambie el estado de disponible a False si el libro est√° disponible, y muestre un mensaje si ya est√° prestado.
‚Ä¢ Incluye un m√©todo devolver() que cambie el estado de disponible a True si estaba prestado, y muestre un mensaje si ya estaba disponible.
‚Ä¢ Incluye un m√©todo mostrar() que devuelva una lista con todos los libros de la biblioteca y los muestre en pantalla con todos sus datos
y diga si est√°s disponible o no.
‚Ä¢ Incluye un m√©todo buscar() que busque un libro en concreto por su ISBM y lo muestre en pantalla con todos sus datos y diga si est√°
disponible o no.

2. Gesti√≥n del inventario:
‚Ä¢ Usa una lista para almacenar objetos de la clase Libro.
‚Ä¢ Implementa un bucle que permita al usuario interactuar con el programa mediante un men√∫ con las siguientes opciones:
‚Ä¢ a) Agregar un nuevo libro ingresando t√≠tulo, autor e ISBN.
‚Ä¢ b) Prestar un libro buscando por ISBN.
‚Ä¢ c) Devolver un libro buscando por ISBN.
‚Ä¢ d) Mostrar todos los libros y su estado (disponible o no).
‚Ä¢ e) Salir del programa.
3. Condiciones:
‚Ä¢ Valida que el ISBN ingresado exista en la lista antes de prestar o devolver un libro.
‚Ä¢ Si el usuario ingresa una opci√≥n inv√°lida en el men√∫, muestra un mensaje de error y vuelve a pedir una opci√≥n.

Entregable:

‚Ä¢ Un script en Python que implemente todas las funcionalidades descritas.
‚Ä¢ El c√≥digo debe ser claro, con comentarios explicativos y usando buenas pr√°cticas

Que se podria hacer para cumplir el enunciado? ( interpreto que todos los metodos nombrados deben ir en la clase Libro)

SOLUCION PLANTEADA:
‚Ä¢ Arriba el codigo.

1Ô∏è‚É£ Organizaci√≥n del C√≥digo
Encapsulaci√≥n: Todos los m√©todos relacionados con un libro deben ir dentro de la clase Libro.
Gesti√≥n del Inventario: Para manejar la lista de libros y la interacci√≥n del usuario, podr√≠as usar una clase separada Biblioteca, 
lo que mejora la separaci√≥n de responsabilidades.
Uso de M√©todos de Clase o Est√°ticos: M√©todos que afectan a la colecci√≥n de libros pueden estar en Biblioteca, no en Libro.
2Ô∏è‚É£ Buenas Pr√°cticas Espec√≠ficas
‚úÖ M√©todos bien estructurados
Cada m√©todo debe hacer solo lo que le corresponde (ejemplo: prestar() solo cambia el estado del libro).
‚úÖ Mensajes de error y validaciones
Siempre verificar si un ISBN existe antes de prestar o devolver un libro.
‚úÖ Evitar c√≥digo repetitivo
Por ejemplo, un m√©todo buscar() en Biblioteca podr√≠a evitar b√∫squedas repetidas en varios m√©todos.
‚úÖ Separaci√≥n de interfaz y l√≥gica de negocio
El men√∫ de usuario debe estar separado de la l√≥gica de la biblioteca.

‚úÖ Aplicaci√≥n de Buenas Pr√°cticas
Encapsulaci√≥n
La clase Libro maneja solo sus atributos y comportamiento individual.
La clase Biblioteca gestiona el inventario y las operaciones generales.

Separaci√≥n de responsabilidades
Libro solo define el comportamiento de los libros.
Biblioteca gestiona la colecci√≥n de libros.
menu() se encarga de la interacci√≥n con el usuario.
Validaciones adecuadas

Se verifica si el ISBN ya existe antes de agregar un libro.
Se valida que el ISBN exista antes de prestar o devolver un libro.

Uso de M√©todos de Apoyo
buscar() evita repetir el mismo c√≥digo de b√∫squeda en diferentes partes del programa.

Interfaz de Usuario Clara
Mensajes informativos para el usuario con emojis para mayor claridad.
üéØ Conclusi√≥n
Siguiendo este dise√±o, el programa cumple con el enunciado y sigue buenas pr√°cticas de programaci√≥n. Adem√°s, es f√°cil de mantener y 
ampliar en el futuro. üöÄ

'''